//
// Created by Karpukhin Aleksandr on 30.01.2022.
//

#ifndef LAB01_ERROR_H
#define LAB01_ERROR_H

#define ERR_NOT_ALLOCATED -1
#define ERR_OUT_OF_RANGE -2
#define ERR_OPEN_FILE_TO_WRITE -3
#define ERR_INVALID_ARGV -4
#define ERR_NULL_POINTER -5
#define ERR_INVALID_LENGTH -6
#define ERR_INVALID_TASK_NUM -7
#define ERR_EMPTY_TASK_LIST -8
#define ERR_UNKNOWN_CODE -9

#define ERR_NOT_ALLOCATED_MESSAGE "\nERROR DURING MEMORY ALLOCATION\n"
#define ERR_OUT_OF_RANGE_MESSAGE "\nERROR DURING ACCESS OUT OF RANGE\n"
#define ERR_OPEN_FILE_TO_WRITE_MESSAGE "\nERROR WHILE OPEN FILE TO WRITE\n"
#define ERR_INVALID_ARGV_MESSAGE "\nINVALID COMMAND LINE ARGUMENTS\n"
#define ERR_NULL_POINTER_MESSAGE "\nACCESS TO NULL POINTER\n"
#define ERR_INVALID_LENGTH_MESSAGE "\nLENGTH VALUE LESS IS THAT ZERO\n"
#define ERR_INVALID_TASK_NUM_MESSAGE "\nZERO TASK NUMBER RECEIVED\n"
#define ERR_EMPTY_TASK_LIST_MESSAGE "\nATTEMPTED TO POP TASK FROM EMPTY TASK LIST\n"
#define ERR_UNKNOWN_CODE_MESSAGE "\nRECEIVED UNKNOWN EXIT CODE FROM OTHER PROCESS\n"
#define ERR_UNKNOWN_MESSAGE "\nUNKNOWN ERROR CODE RECEIVED\n"

typedef int err_code_t;

void error_code_handler(err_code_t code);

#endif //LAB01_ERROR_H
